; Sony MI-SPI state machine for sending data in the MOSI direction
; (Sending data to a real flash)
; 2023/04 Andrew Villeneuve

; Pin mapping:
; OUT 0 = DATA
; SIDE 0 = CLK

; Note that the physical wiring of these signals must be both consequtive and in this order

; The MOSI START pulse will have already been sent when the SM starts,
; so the first CLK pulse we send should be for a data bit

.program tx_mosi
.side_set 1

.define T_BIT   1                       ; Cycles to wait between clock edges
.define T_BYTE  15                      ; Cycles to wait between octets
.define BYTECOUNT 5                     ; Number of octets to shift 

.wrap_target
    set y BYTECOUNT     side 0  [T_BYTE]    ; Init byte counter, wait 64us
newbyte:
    set x 7             side 0  [T_BYTE]    ; Init bit counter, wait 64us
bitloop:
    nop                 side 1  [T_BIT]     ; set clock high for 8us
    out pins 1          side 0              ; write DATA, set clock low
    jmp x-- bitloop     side 0              ; branch then decrement bit counter
    jmp y-- newbyte     side 0  [T_BYTE]    ; wait, branch, then decrement byte counter
halt:
    jmp halt            side 0
.wrap

% c-sdk {
#include "hardware/clocks.h"

static inline void tx_mosi_program_init(PIO pio, uint sm, uint offset, uint clkpin, uint datapin) {
    pio_sm_config c = tx_mosi_program_get_default_config(offset);

    // Map Clock to SIDE pin 0, Data to OUT pin 0
    sm_config_set_sideset_pins(&c, clkpin);
    sm_config_set_out_pins(&c, datapin, 1);

    // Set pin function as PIO 
    pio_gpio_init(pio, clkpin);
    pio_gpio_init(pio, datapin);

    // Set DATA pin as output, CLK as output
    pio_sm_set_consecutive_pindirs(pio, sm, datapin, 2, true);

    // OSR Shift: shift right, autopull enabled, every 8 bits
    sm_config_set_out_shift(&c, true, true, 8);

    // Setup clock divider - we want each PIO cycle to be about 4us
    float div = clock_get_hz(clk_sys) / 125000 / 2;
    sm_config_set_clkdiv(&c, div);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
}
%}
